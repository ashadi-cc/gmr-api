// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	repository "api-gmr/store/repository"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// User is an autogenerated mock type for the User type
type User struct {
	mock.Mock
}

// FindByUserID provides a mock function with given fields: ctx, userID
func (_m *User) FindByUserID(ctx context.Context, userID int) (repository.UserModel, error) {
	ret := _m.Called(ctx, userID)

	var r0 repository.UserModel
	if rf, ok := ret.Get(0).(func(context.Context, int) repository.UserModel); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.UserModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUsername provides a mock function with given fields: ctx, username
func (_m *User) FindByUsername(ctx context.Context, username string) (repository.UserModel, error) {
	ret := _m.Called(ctx, username)

	var r0 repository.UserModel
	if rf, ok := ret.Get(0).(func(context.Context, string) repository.UserModel); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(repository.UserModel)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateEmailandPassword provides a mock function with given fields: ctx, user
func (_m *User) UpdateEmailandPassword(ctx context.Context, user repository.UserModel) error {
	ret := _m.Called(ctx, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.UserModel) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
